name: Version Bump

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: "Dry run (no commits)"
        required: true
        type: boolean
        default: true
      force_tag:
        description: "Force update existing tags"
        required: false
        type: boolean
        default: false
      skip_tagging:
        description: "Skip tag creation entirely"
        required: false
        type: boolean
        default: false
      trigger_release:
        description: "Trigger release workflow after version bump"
        required: false
        type: boolean
        default: false

# Sets permissions of the GITHUB_TOKEN to allow pushing to the repository
permissions:
  contents: write # Needed to push commits and tags

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-workspaces
        run: cargo install cargo-workspaces

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Bump versions
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            cargo workspaces version ${{ github.event.inputs.bump_type }} --no-git-commit --exact --yes --all
            
            # Get the new version for informational purposes
            NEW_VERSION=$(grep -m 1 'version = ' Cargo.toml | cut -d '"' -f 2)
            echo "Would update to version $NEW_VERSION (dry run)"
          else
            # Use --no-git-tag to handle tagging manually and --all to update all packages
            cargo workspaces version ${{ github.event.inputs.bump_type }} --exact --yes --no-git-tag --all
            
            # Get the new version
            NEW_VERSION=$(grep -m 1 'version = ' Cargo.toml | cut -d '"' -f 2)
            echo "Updated to version $NEW_VERSION"
            
            # Also update the explicit version requirements in the main Cargo.toml
            # This is needed because cargo-workspaces doesn't update these
            sed -i "s/flowrs-core = { path = \"crates\/flowrs-core\", version = \"[0-9.]*\"/flowrs-core = { path = \"crates\/flowrs-core\", version = \"$NEW_VERSION\"/g" Cargo.toml
            sed -i "s/flowrs-transform = { path = \"crates\/flowrs-transform\", version = \"[0-9.]*\"/flowrs-transform = { path = \"crates\/flowrs-transform\", version = \"$NEW_VERSION\"/g" Cargo.toml
            sed -i "s/flowrs-event = { path = \"crates\/flowrs-event\", version = \"[0-9.]*\"/flowrs-event = { path = \"crates\/flowrs-event\", version = \"$NEW_VERSION\"/g" Cargo.toml
            sed -i "s/flowrs-timer = { path = \"crates\/flowrs-timer\", version = \"[0-9.]*\"/flowrs-timer = { path = \"crates\/flowrs-timer\", version = \"$NEW_VERSION\"/g" Cargo.toml
            sed -i "s/flowrs-longrunning = { path = \"crates\/flowrs-longrunning\", version = \"[0-9.]*\"/flowrs-longrunning = { path = \"crates\/flowrs-longrunning\", version = \"$NEW_VERSION\"/g" Cargo.toml
            sed -i "s/flowrs-reactive = { path = \"crates\/flowrs-reactive\", version = \"[0-9.]*\"/flowrs-reactive = { path = \"crates\/flowrs-reactive\", version = \"$NEW_VERSION\"/g" Cargo.toml
            
            # Handle all possible version formats in crates
            echo "Updating individual crate dependencies..."
            for crate_dir in crates/flowrs-*; do
              echo "Processing $crate_dir"
              
              # First check if Cargo.toml exists (safety check)
              if [ -f "$crate_dir/Cargo.toml" ]; then
                echo "Updating dependencies in $crate_dir/Cargo.toml"
                
                # Handle different version formats
                # 1. Format: version = "=1.0.0"
                sed -i "s/version = \"=[0-9.]*\"/version = \"=$NEW_VERSION\"/g" "$crate_dir/Cargo.toml"
                
                # 2. Format: flowrs-core = { path = "../flowrs-core", version = "=1.0.0" }
                sed -i "s/flowrs-[a-z]* = { path = \"..\/flowrs-[a-z]*\", version = \"=[0-9.]*\"/&\"/;s/flowrs-\([a-z]*\) = { path = \"..\/flowrs-\([a-z]*\)\", version = \"=[0-9.]*\"/flowrs-\1 = { path = \"..\/flowrs-\1\", version = \"=$NEW_VERSION\"/g" "$crate_dir/Cargo.toml"
                
                # 3. Format: flowrs-core = { path = "../flowrs-core", version = "1.0.0" }
                sed -i "s/flowrs-[a-z]* = { path = \"..\/flowrs-[a-z]*\", version = \"[0-9.]*\"/&\"/;s/flowrs-\([a-z]*\) = { path = \"..\/flowrs-\([a-z]*\)\", version = \"[0-9.]*\"/flowrs-\1 = { path = \"..\/flowrs-\1\", version = \"$NEW_VERSION\"/g" "$crate_dir/Cargo.toml"
                
                # Direct check and update for flowrs-timer
                if [ "$crate_dir" = "crates/flowrs-timer" ]; then
                  echo "Special handling for flowrs-timer Cargo.toml"
                  cat "$crate_dir/Cargo.toml" | grep -n "flowrs-core"
                  # Direct replacement with new version
                  sed -i "s/flowrs-core = { path = \"..\/flowrs-core\", version = \"[^\"]*\"/flowrs-core = { path = \"..\/flowrs-core\", version = \"$NEW_VERSION\"/g" "$crate_dir/Cargo.toml"
                fi
                
                # Add each updated file to git
                git add "$crate_dir/Cargo.toml"
              fi
            done
            
            # More robust approach for flowrs-timer specifically
            if [ -f "crates/flowrs-timer/Cargo.toml" ]; then
              echo "Explicitly updating flowrs-timer's dependencies..."
              # Backup the original file
              cp crates/flowrs-timer/Cargo.toml crates/flowrs-timer/Cargo.toml.bak
              
              # Use awk for more precise replacement
              awk -v new_ver="$NEW_VERSION" '
              /flowrs-core = \{ path = "\.\.\/flowrs-core"/ {
                gsub(/version = "[^"]+"/, "version = \"" new_ver "\"")
              }
              { print }
              ' crates/flowrs-timer/Cargo.toml.bak > crates/flowrs-timer/Cargo.toml
              
              # Remove backup
              rm crates/flowrs-timer/Cargo.toml.bak
              
              # Add to git
              git add crates/flowrs-timer/Cargo.toml
            fi
            
            # Add all Cargo.toml files to ensure nothing is missed
            git add "crates/*/Cargo.toml"
            
            # Commit the changes to the explicit version requirements
            git add Cargo.toml
            git commit --amend --no-edit
            git push --force-with-lease origin HEAD
            
            # Create and push tag if not skipped
            if [ "${{ github.event.inputs.skip_tagging }}" != "true" ]; then
              TAG_NAME="v${NEW_VERSION}"
              
              # Check if tag exists
              if git show-ref --tags "$TAG_NAME" --quiet; then
                if [ "${{ github.event.inputs.force_tag }}" = "true" ]; then
                  echo "Tag $TAG_NAME exists, force updating"
                  git tag -d "$TAG_NAME"
                  git push origin ":refs/tags/$TAG_NAME" || true
                  
                  # Also delete individual crate tags if they exist
                  for CRATE_TAG in $(git tag | grep "@${NEW_VERSION}$"); do
                    echo "Deleting individual crate tag: $CRATE_TAG"
                    git tag -d "$CRATE_TAG"
                    git push origin ":refs/tags/$CRATE_TAG" || true
                  done
                  
                  # Create new tag
                  git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
                  git push origin "$TAG_NAME"
                  
                  echo "Tags updated successfully"
                else
                  echo "Tag $TAG_NAME already exists. Use force_tag option to update it."
                  exit 0
                fi
              else
                git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
                git push origin "$TAG_NAME"
              fi
              
              # If trigger_release is true, wait a moment for tag to be processed
              # and then manually trigger the release workflow
              if [ "${{ github.event.inputs.trigger_release }}" = "true" ]; then
                echo "Waiting for tag to be processed before triggering release workflow..."
                sleep 10
                
                # Check if the tag was successfully pushed
                if git ls-remote --tags origin | grep -q "$TAG_NAME"; then
                  echo "Tag $TAG_NAME successfully pushed, release workflow should be triggered automatically."
                else
                  echo "Warning: Tag $TAG_NAME not found on remote. Release workflow may not trigger."
                fi
              fi
            else
              echo "Skipping tag creation as requested"
            fi
          fi
