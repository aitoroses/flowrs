name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v1.0.1)"
        required: true
        type: string

# Sets permissions of the GITHUB_TOKEN to allow creating releases
permissions:
  contents: write # Needed for creating GitHub releases

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
      - name: Determine tag ref
        id: determine_ref
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG_REF=refs/tags/${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_REF=${{ github.ref }}" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.determine_ref.outputs.TAG_REF }}
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_PAT }}

      - name: Fetch annotated tag (workaround for actions/checkout#290)
        run: |
          git fetch --force origin ${{ steps.determine_ref.outputs.TAG_REF }}:${{ steps.determine_ref.outputs.TAG_REF }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Verify tag version matches Cargo.toml
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG_VERSION="${{ github.event.inputs.tag }}"
            TAG_VERSION=${TAG_VERSION#v}
          else
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
          fi
          CARGO_VERSION=$(grep -m 1 'version = ' Cargo.toml | cut -d '"' -f 2)
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi

      - name: Run tests with all features
        run: cargo test --all-features

      # Update subcrate versions to use workspace inheritance
      - name: Update subcrate versions
        run: ./scripts/update_subcrate_versions.sh

      # Update dependency versions in the root crate
      - name: Update dependency versions
        run: ./scripts/update_dependency_versions.sh

      # Publish floxide-core
      - name: Publish floxide-core
        working-directory: ./crates/floxide-core
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Wait for crates.io indexing
        run: sleep 15

      - name: Publish floxide-transform
        working-directory: ./crates/floxide-transform
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Wait for crates.io indexing
        run: sleep 15

      - name: Publish floxide-event
        working-directory: ./crates/floxide-event
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Wait for crates.io indexing
        run: sleep 15

      - name: Publish floxide-timer
        working-directory: ./crates/floxide-timer
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Wait for crates.io indexing
        run: sleep 15

      - name: Publish floxide-longrunning
        working-directory: ./crates/floxide-longrunning
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Wait for crates.io indexing
        run: sleep 15

      - name: Publish floxide-reactive
        working-directory: ./crates/floxide-reactive
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Wait for crates.io indexing
        run: sleep 15

      # Publish the main crate with all features
      - name: Publish floxide (root)
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_ref.outputs.TAG_REF }}
          name: Release ${{ steps.determine_ref.outputs.TAG_REF }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
